1. Defina o que é feito na etapa de Análise e o que é feito na etapa de Projeto ao desenvolver software.

R. No analise, é feito o levantamento de requisitos, especificação de requisitos, verificação de requisitos, definição de prioridades. Já no projeto,será aplicado o que foi analisado. Fazendo com que o produto seja feito de acordo com a solicitação.

2. Enumere as vantagens da abordagem Orientada a Objetos para o desenvolvimento de software.

R. A codificação fica mais próxima do cenário real do problema. Manutenção futura fica melhor com maior reutilização do código, desempenho, segurança e Padronização.

3. Qual é o motivo de levantar Requisitos Funcionais para desenvolver software e o que faz parte de uma descrição de Requisitos Funcionais?

R. Os requisitos funcionais é tudo aquilo que realmente o cliente ver na prática, geralmente o que ele irá ter maior contato. Por exemplo requisitos funcionais: telas, desempenho ao clicar num botão, uma impressão, um relatório, Um login,  tudo se encaixa em requisitos funcionais.

4. Prática

5. Explique o que é um Iterator em Java. Qual é sua principal vantagem?

R. Iterator é um padrão de projeto que fornece o acesso a coleções de objetos (matrizes, listas). Sua principal vantagem é isolar o uso de uma estrutura de dados de sua representação interna de forma a poder mudar a estrutura sem afetar quem a usa.

6. Prática

7. Explique a diferença de funcionamento entre um "return" e um "throw". Seja especifico.

R. O return irá retornar algum objeto, já o throw é um tratador de erro.

8. Prática

9. Explique as vantagens e desvantagens do polimorfismo. Dê exemplos.

R. Vantagens é a simplicidade na sua escrita, pois o objeto pode está sendo manipulado em várias classes (mãe, filha). Escalabilidade pois em momentos futuros classes poderão serem adicionadas no projetos, e os objetos serem reutilizados. Desvantagens são se não for utilizado de forma correto, os objetos que foram chamados poderão acarretar erros futuros.

10. Explique a afirmação: "Em Java, o conceito de interfaces permite obter mais polimorfismo do que seria possível com classes abstratas".

R.Classe abstrata só permite instância uma, agora com interfaces é possível implementar varias

11. Qual é a diferença entre "herança de tipo" e "herança de implementação.”?

R. A herança de Tipo: permite a classe herdar uma interface completa com todo os atributos públicos. Já a herança de implementação: permite várias interfaces implementar o mesmo método com a mesma assinatura.

12. Quais são as vantagens e desvantagens de acoplamento forte entre objetos?

R. Um dos benefícios da Herança é que ela captura o que é comum e o isola daquilo que é diferente, além disso, a herança é vista diretamente no código até mesmo devido a sua natureza estática. Desvantagens está o fraco encapsulamento entre classes e subclasses e o forte acoplamento entre elas onde ao mudar uma superclasse pode afetar todas as subclasses além de violar o princípio básico de projeto OO em que devemos ter sempre um baixo acoplamento entre as classes.

13. Prática

14. O que é uma "responsabilidade de uma classe"? Por que queremos minimizar o número de responsabilidades? "Mais" não seria melhor?

R. Responsabilidade da classe é basicamente criar os objetos e métodos, minimizar o numero de responsabilidade requer em dividir as funções, porque quando se tem uma herança (classe filha), e precisar alterar algum objeto ou atributo, vai direto à classe especifica, e não na classe raiz (classe mãe). Nem sempre, dividir tarefas fará com que a funcionalidade do código seja melhor, até mesmo no futuro em sua manutenção.

15. Prática


Aluno: Emmanuell de Araujo Ramalho 
Matricula: 1413080004

 
